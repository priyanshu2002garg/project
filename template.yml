AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyServerlessFunction
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              # HTML content as a string
              html_content = """
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>My Lambda Frontend</title>
                  <style>
                      body {
                          font-family: Arial, sans-serif;
                          background-color: #f4f4f4;
                          margin: 0;
                          padding: 0;
                      }
                      header {
                          background-color: #333;
                          color: white;
                          text-align: center;
                          padding: 10px;
                      }
                      main {
                          padding: 20px;
                          text-align: center;
                      }
                      button {
                          background-color: #4CAF50;
                          color: white;
                          padding: 10px 20px;
                          border: none;
                          cursor: pointer;
                          font-size: 16px;
                      }
                      button:hover {
                          background-color: #45a049;
                      }
                  </style>
              </head>
              <body>
                  <header>
                      <h1>Welcome to SLK Family</h1>
                  </header>
                  <main>
                       <img src = "https://www.google.com/imgres?q=slk%20building&imgurl=https%3A%2F%2Fmedia.licdn.com%2Fdms%2Fimage%2Fv2%2FC5122AQHbc-6udYRW0g%2Ffeedshare-shrink_800%2Ffeedshare-shrink_800%2F0%2F1547730803958%3Fe%3D2147483647%26v%3Dbeta%26t%3DOaNI3v-8xUSp6lUQ3abFqI29aKd2tIeGZBP-dvjQ__k&imgrefurl=https%3A%2F%2Fwww.linkedin.com%2Fposts%2Fslk_proudtobeanslkian-greenpark-lifeatslk-activity-6491653506041249792-NjiP&docid=qEvkNH0m1mXmPM&tbnid=rut6nKUEIKpQ2M&vet=12ahUKEwiy1f7hxN2JAxUK2DgGHdbpAAoQM3oECCsQAA..i&w=800&h=367&hcb=2&ved=2ahUKEwiy1f7hxN2JAxUK2DgGHdbpAAoQM3oECCsQAA">
                      <p>This page is generated by an AWS Lambda function.</p>
                      <button onclick="alert('Hello from our Team')">Click Me</button>
                  </main>
              </body>
              </html>
              """
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'text/html'  # Ensure that the response is interpreted as HTML
                  },
                  'body': html_content
              }
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10

  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyServerlessAPI
      Description: "API Gateway for serverless API example"

  LambdaApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: my-resource

  LambdaApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref LambdaApiGatewayResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations

  LambdaApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: prod
    DependsOn: LambdaApiMethod

  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

